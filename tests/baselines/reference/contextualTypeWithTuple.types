//// [tests/cases/conformance/types/tuple/contextualTypeWithTuple.ts] ////

=== contextualTypeWithTuple.ts ===
// no error
var numStrTuple: [number, string] = [5, "hello"];
>numStrTuple : [number, string]
>            : ^^^^^^^^^^^^^^^^
>[5, "hello"] : [number, string]
>             : ^^^^^^^^^^^^^^^^
>5 : number
>  : ^^^^^^
>"hello" : string
>        : ^^^^^^

var numStrTuple2: [number, string] = [5, "foo", true];
>numStrTuple2 : [number, string]
>             : ^^^^^^^^^^^^^^^^
>[5, "foo", true] : [number, string, boolean]
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^
>5 : number
>  : ^^^^^^
>"foo" : string
>      : ^^^^^^
>true : true
>     : ^^^^

var numStrBoolTuple: [number, string, boolean] = [5, "foo", true];
>numStrBoolTuple : [number, string, boolean]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^
>[5, "foo", true] : [number, string, true]
>                 : ^^^^^^^^^^^^^^^^^^^^^^
>5 : number
>  : ^^^^^^
>"foo" : string
>      : ^^^^^^
>true : true
>     : ^^^^

var objNumTuple: [{ a: string }, number] = [{ a: "world" }, 5];
>objNumTuple : [{ a: string; }, number]
>            : ^^^^^^      ^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>[{ a: "world" }, 5] : [{ a: string; }, number]
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^
>{ a: "world" } : { a: string; }
>               : ^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>"world" : string
>        : ^^^^^^
>5 : number
>  : ^^^^^^

var strTupleTuple: [string, [number, {}]] = ["bar", [5, { x: 1, y: 1 }]];
>strTupleTuple : [string, [number, {}]]
>              : ^^^^^^^^^^^^^^^^^^^^^^
>["bar", [5, { x: 1, y: 1 }]] : [string, [number, { x: number; y: number; }]]
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^
>[5, { x: 1, y: 1 }] : [number, { x: number; y: number; }]
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>5 : number
>  : ^^^^^^
>{ x: 1, y: 1 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^

class C { }
>C : C
>  : ^

class D { }
>D : D
>  : ^

var unionTuple: [C, string | number] = [new C(), "foo"];
>unionTuple : [C, string | number]
>           : ^^^^^^^^^^^^^^^^^^^^
>[new C(), "foo"] : [C, string]
>                 : ^^^^^^^^^^^
>new C() : C
>        : ^
>C : typeof C
>  : ^^^^^^^^
>"foo" : string
>      : ^^^^^^

var unionTuple1: [C, string | number] = [new C(), "foo"];
>unionTuple1 : [C, string | number]
>            : ^^^^^^^^^^^^^^^^^^^^
>[new C(), "foo"] : [C, string]
>                 : ^^^^^^^^^^^
>new C() : C
>        : ^
>C : typeof C
>  : ^^^^^^^^
>"foo" : string
>      : ^^^^^^

var unionTuple2: [C, string | number, D] = [new C(), "foo", new D()];
>unionTuple2 : [C, string | number, D]
>            : ^^^^^^^^^^^^^^^^^^^^^^^
>[new C(), "foo", new D()] : [C, string, D]
>                          : ^^^^^^^^^^^^^^
>new C() : C
>        : ^
>C : typeof C
>  : ^^^^^^^^
>"foo" : string
>      : ^^^^^^
>new D() : D
>        : ^
>D : typeof D
>  : ^^^^^^^^

var unionTuple3: [number, string| number] = [10, "foo"]; 
>unionTuple3 : [number, string | number]
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^
>[10, "foo"] : [number, string]
>            : ^^^^^^^^^^^^^^^^
>10 : number
>   : ^^^^^^
>"foo" : string
>      : ^^^^^^

numStrTuple = numStrTuple2;
>numStrTuple = numStrTuple2 : [number, string]
>                           : ^^^^^^^^^^^^^^^^
>numStrTuple : [number, string]
>            : ^^^^^^^^^^^^^^^^
>numStrTuple2 : [number, string]
>             : ^^^^^^^^^^^^^^^^

numStrTuple = numStrBoolTuple;
>numStrTuple = numStrBoolTuple : [number, string, boolean]
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^
>numStrTuple : [number, string]
>            : ^^^^^^^^^^^^^^^^
>numStrBoolTuple : [number, string, boolean]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^

// error
objNumTuple = [ {}, 5];
>objNumTuple = [ {}, 5] : [{}, number]
>                       : ^^^^^^^^^^^^
>objNumTuple : [{ a: string; }, number]
>            : ^^^^^^      ^^^^^^^^^^^^
>[ {}, 5] : [{}, number]
>         : ^^^^^^^^^^^^
>{} : {}
>   : ^^
>5 : number
>  : ^^^^^^

numStrBoolTuple = numStrTuple;
>numStrBoolTuple = numStrTuple : [number, string]
>                              : ^^^^^^^^^^^^^^^^
>numStrBoolTuple : [number, string, boolean]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^
>numStrTuple : [number, string]
>            : ^^^^^^^^^^^^^^^^

var strStrTuple: [string, string] = ["foo", "bar", 5];
>strStrTuple : [string, string]
>            : ^^^^^^^^^^^^^^^^
>["foo", "bar", 5] : [string, string, number]
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>"bar" : string
>      : ^^^^^^
>5 : 5
>  : ^

unionTuple = unionTuple1;
>unionTuple = unionTuple1 : [C, string | number]
>                         : ^^^^^^^^^^^^^^^^^^^^
>unionTuple : [C, string | number]
>           : ^^^^^^^^^^^^^^^^^^^^
>unionTuple1 : [C, string | number]
>            : ^^^^^^^^^^^^^^^^^^^^

unionTuple = unionTuple2;
>unionTuple = unionTuple2 : [C, string | number, D]
>                         : ^^^^^^^^^^^^^^^^^^^^^^^
>unionTuple : [C, string | number]
>           : ^^^^^^^^^^^^^^^^^^^^
>unionTuple2 : [C, string | number, D]
>            : ^^^^^^^^^^^^^^^^^^^^^^^

unionTuple2 = unionTuple;
>unionTuple2 = unionTuple : [C, string | number]
>                         : ^^^^^^^^^^^^^^^^^^^^
>unionTuple2 : [C, string | number, D]
>            : ^^^^^^^^^^^^^^^^^^^^^^^
>unionTuple : [C, string | number]
>           : ^^^^^^^^^^^^^^^^^^^^

numStrTuple = unionTuple3;
>numStrTuple = unionTuple3 : [number, string | number]
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>numStrTuple : [number, string]
>            : ^^^^^^^^^^^^^^^^
>unionTuple3 : [number, string | number]
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^

// repro from #29311
type test1 = [...number[]]
>test1 : test1
>      : ^^^^^

type fixed1 = test1 & { length: 2 }
>fixed1 : fixed1
>       : ^^^^^^
>length : 2
>       : ^

let var1: fixed1 = [0, 0]
>var1 : fixed1
>     : ^^^^^^
>[0, 0] : [number, number]
>       : ^^^^^^^^^^^^^^^^
>0 : number
>  : ^^^^^^
>0 : number
>  : ^^^^^^

// #52551
type EmptyTuple = []
>EmptyTuple : []
>           : ^^

interface MyEmptyTuple extends EmptyTuple { extraInfo?: any; }
>extraInfo : any
>          : ^^^

const withExtra: MyEmptyTuple = []
>withExtra : MyEmptyTuple
>          : ^^^^^^^^^^^^
>[] : []
>   : ^^

