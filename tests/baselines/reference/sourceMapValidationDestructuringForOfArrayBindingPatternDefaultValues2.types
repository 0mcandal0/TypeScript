//// [tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.ts] ////

=== sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.ts ===
declare var console: {
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^

    log(msg: any): void;
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>msg : any
}
type Robot = [number, string, string];
>Robot : Robot
>      : ^^^^^

type MultiSkilledRobot = [string, [string, string]];
>MultiSkilledRobot : MultiSkilledRobot
>                  : ^^^^^^^^^^^^^^^^^

let robotA: Robot = [1, "mower", "mowing"];
>robotA : Robot
>       : ^^^^^
>[1, "mower", "mowing"] : [number, string, string]
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>1 : number
>  : ^^^^^^
>"mower" : string
>        : ^^^^^^
>"mowing" : string
>         : ^^^^^^

let robotB: Robot = [2, "trimmer", "trimming"];
>robotB : Robot
>       : ^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : number
>  : ^^^^^^
>"trimmer" : string
>          : ^^^^^^
>"trimming" : string
>           : ^^^^^^

let robots = [robotA, robotB];
>robots : Robot[]
>       : ^^^^^^^
>[robotA, robotB] : Robot[]
>                 : ^^^^^^^
>robotA : Robot
>       : ^^^^^
>robotB : Robot
>       : ^^^^^

function getRobots() {
>getRobots : () => Robot[]
>          : ^^^^^^^^^^^^^

    return robots;
>robots : Robot[]
>       : ^^^^^^^
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>["mower", ["mowing", ""]] : [string, [string, string]]
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"mower" : string
>        : ^^^^^^
>["mowing", ""] : [string, string]
>               : ^^^^^^^^^^^^^^^^
>"mowing" : string
>         : ^^^^^^
>"" : string
>   : ^^^^^^

let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];
>multiRobotB : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : string
>          : ^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : string
>           : ^^^^^^
>"edging" : string
>         : ^^^^^^

let multiRobots = [multiRobotA, multiRobotB];
>multiRobots : MultiSkilledRobot[]
>            : ^^^^^^^^^^^^^^^^^^^
>[multiRobotA, multiRobotB] : MultiSkilledRobot[]
>                           : ^^^^^^^^^^^^^^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>multiRobotB : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^

function getMultiRobots() {
>getMultiRobots : () => MultiSkilledRobot[]
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^

    return multiRobots;
>multiRobots : MultiSkilledRobot[]
>            : ^^^^^^^^^^^^^^^^^^^
}

let nameA: string, primarySkillA: string, secondarySkillA: string;
>nameA : string
>      : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^

let numberB: number, nameB: string;
>numberB : number
>        : ^^^^^^
>nameB : string
>      : ^^^^^^

let numberA2: number, nameA2: string, skillA2: string, nameMA: string;
>numberA2 : number
>         : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>nameMA : string
>       : ^^^^^^

let numberA3: number, robotAInfo: (number | string)[], multiRobotAInfo: (string | [string, string])[];
>numberA3 : number
>         : ^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

for ([, nameA = "noName"] of robots) {
>[, nameA = "noName"] : [undefined, string]
>                     : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA = "noName" : string
>                 : ^^^^^^
>nameA : string
>      : ^^^^^^
>"noName" : string
>         : ^^^^^^
>robots : Robot[]
>       : ^^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, nameA = "noName"] of getRobots()) {
>[, nameA = "noName"] : [undefined, string]
>                     : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA = "noName" : string
>                 : ^^^^^^
>nameA : string
>      : ^^^^^^
>"noName" : string
>         : ^^^^^^
>getRobots() : Robot[]
>            : ^^^^^^^
>getRobots : () => Robot[]
>          : ^^^^^^^^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, nameA = "noName"] of [robotA, robotB]) {
>[, nameA = "noName"] : [undefined, string]
>                     : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA = "noName" : string
>                 : ^^^^^^
>nameA : string
>      : ^^^^^^
>"noName" : string
>         : ^^^^^^
>[robotA, robotB] : Robot[]
>                 : ^^^^^^^
>robotA : Robot
>       : ^^^^^
>robotB : Robot
>       : ^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, [
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"]] : [undefined, [string, string]]
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"] : [string, string]
>                                                                                         : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : string
>                          : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : string
>          : ^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : string
>                              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : string
>            : ^^^^^^

] = ["skill1", "skill2"]] of multiRobots) {
>["skill1", "skill2"] : [string, string]
>                     : ^^^^^^^^^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^
>multiRobots : MultiSkilledRobot[]
>            : ^^^^^^^^^^^^^^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}
for ([, [
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"]] : [undefined, [string, string]]
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"] : [string, string]
>                                                                                         : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : string
>                          : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : string
>          : ^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : string
>                              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : string
>            : ^^^^^^

] = ["skill1", "skill2"]] of getMultiRobots()) {
>["skill1", "skill2"] : [string, string]
>                     : ^^^^^^^^^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^
>getMultiRobots() : MultiSkilledRobot[]
>                 : ^^^^^^^^^^^^^^^^^^^
>getMultiRobots : () => MultiSkilledRobot[]
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}
for ([, [
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"]] : [undefined, [string, string]]
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"] : [string, string]
>                                                                                         : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : string
>                          : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : string
>          : ^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : string
>                              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : string
>            : ^^^^^^

] = ["skill1", "skill2"]] of [multiRobotA, multiRobotB]) {
>["skill1", "skill2"] : [string, string]
>                     : ^^^^^^^^^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^
>[multiRobotA, multiRobotB] : MultiSkilledRobot[]
>                           : ^^^^^^^^^^^^^^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>multiRobotB : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}

for ([numberB = -1] of robots) {
>[numberB = -1] : [number]
>               : ^^^^^^^^
>numberB = -1 : -1
>             : ^^
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>robots : Robot[]
>       : ^^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([numberB = -1] of getRobots()) {
>[numberB = -1] : [number]
>               : ^^^^^^^^
>numberB = -1 : -1
>             : ^^
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>getRobots() : Robot[]
>            : ^^^^^^^
>getRobots : () => Robot[]
>          : ^^^^^^^^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([numberB = -1] of [robotA, robotB]) {
>[numberB = -1] : [number]
>               : ^^^^^^^^
>numberB = -1 : -1
>             : ^^
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>[robotA, robotB] : Robot[]
>                 : ^^^^^^^
>robotA : Robot
>       : ^^^^^
>robotB : Robot
>       : ^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([nameB = "noName"] of multiRobots) {
>[nameB = "noName"] : [string]
>                   : ^^^^^^^^
>nameB = "noName" : string
>                 : ^^^^^^
>nameB : string
>      : ^^^^^^
>"noName" : string
>         : ^^^^^^
>multiRobots : MultiSkilledRobot[]
>            : ^^^^^^^^^^^^^^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}
for ([nameB = "noName"] of getMultiRobots()) {
>[nameB = "noName"] : [string]
>                   : ^^^^^^^^
>nameB = "noName" : string
>                 : ^^^^^^
>nameB : string
>      : ^^^^^^
>"noName" : string
>         : ^^^^^^
>getMultiRobots() : MultiSkilledRobot[]
>                 : ^^^^^^^^^^^^^^^^^^^
>getMultiRobots : () => MultiSkilledRobot[]
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}
for ([nameB = "noName"] of [multiRobotA, multiRobotB]) {
>[nameB = "noName"] : [string]
>                   : ^^^^^^^^
>nameB = "noName" : string
>                 : ^^^^^^
>nameB : string
>      : ^^^^^^
>"noName" : string
>         : ^^^^^^
>[multiRobotA, multiRobotB] : MultiSkilledRobot[]
>                           : ^^^^^^^^^^^^^^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>multiRobotB : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}

for ([numberA2 = -1, nameA2 = "noName", skillA2 = "skill"] of robots) {
>[numberA2 = -1, nameA2 = "noName", skillA2 = "skill"] : [number, string, string]
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 = -1 : -1
>              : ^^
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 = "noName" : string
>                  : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^
>skillA2 = "skill" : string
>                  : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>"skill" : string
>        : ^^^^^^
>robots : Robot[]
>       : ^^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([numberA2 = -1, nameA2 = "noName", skillA2 = "skill"] of getRobots()) {
>[numberA2 = -1, nameA2 = "noName", skillA2 = "skill"] : [number, string, string]
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 = -1 : -1
>              : ^^
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 = "noName" : string
>                  : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^
>skillA2 = "skill" : string
>                  : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>"skill" : string
>        : ^^^^^^
>getRobots() : Robot[]
>            : ^^^^^^^
>getRobots : () => Robot[]
>          : ^^^^^^^^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([numberA2 = -1, nameA2 = "noName", skillA2 = "skill"] of [robotA, robotB]) {
>[numberA2 = -1, nameA2 = "noName", skillA2 = "skill"] : [number, string, string]
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 = -1 : -1
>              : ^^
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 = "noName" : string
>                  : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^
>skillA2 = "skill" : string
>                  : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>"skill" : string
>        : ^^^^^^
>[robotA, robotB] : Robot[]
>                 : ^^^^^^^
>robotA : Robot
>       : ^^^^^
>robotB : Robot
>       : ^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([nameMA = "noName", [
>[nameMA = "noName", [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"]] : [string, [string, string]]
>                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA = "noName" : string
>                  : ^^^^^^
>nameMA : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"] : [string, string]
>                                                                                         : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : string
>                          : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : string
>          : ^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : string
>                              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : string
>            : ^^^^^^

] = ["skill1", "skill2"]] of multiRobots) {
>["skill1", "skill2"] : [string, string]
>                     : ^^^^^^^^^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^
>multiRobots : MultiSkilledRobot[]
>            : ^^^^^^^^^^^^^^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}
for ([nameMA = "noName", [
>[nameMA = "noName", [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"]] : [string, [string, string]]
>                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA = "noName" : string
>                  : ^^^^^^
>nameMA : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"] : [string, string]
>                                                                                         : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : string
>                          : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : string
>          : ^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : string
>                              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : string
>            : ^^^^^^

] = ["skill1", "skill2"]] of getMultiRobots()) {
>["skill1", "skill2"] : [string, string]
>                     : ^^^^^^^^^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^
>getMultiRobots() : MultiSkilledRobot[]
>                 : ^^^^^^^^^^^^^^^^^^^
>getMultiRobots : () => MultiSkilledRobot[]
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}
for ([nameMA = "noName", [
>[nameMA = "noName", [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"]] : [string, [string, string]]
>                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA = "noName" : string
>                  : ^^^^^^
>nameMA : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["skill1", "skill2"] : [string, string]
>                                                                                         : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : string
>                          : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : string
>          : ^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : string
>                              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : string
>            : ^^^^^^

] = ["skill1", "skill2"]] of [multiRobotA, multiRobotB]) {
>["skill1", "skill2"] : [string, string]
>                     : ^^^^^^^^^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^
>[multiRobotA, multiRobotB] : MultiSkilledRobot[]
>                           : ^^^^^^^^^^^^^^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>multiRobotB : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}

for ([numberA3 = -1, ...robotAInfo] of robots) {
>[numberA3 = -1, ...robotAInfo] : [number, ...(string | number)[]]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 = -1 : -1
>              : ^^
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>robots : Robot[]
>       : ^^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
for ([numberA3 = -1, ...robotAInfo] of getRobots()) {
>[numberA3 = -1, ...robotAInfo] : [number, ...(string | number)[]]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 = -1 : -1
>              : ^^
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>getRobots() : Robot[]
>            : ^^^^^^^
>getRobots : () => Robot[]
>          : ^^^^^^^^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
for ([numberA3 = -1, ...robotAInfo] of [robotA, robotB]) {
>[numberA3 = -1, ...robotAInfo] : [number, ...(string | number)[]]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 = -1 : -1
>              : ^^
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>[robotA, robotB] : Robot[]
>                 : ^^^^^^^
>robotA : Robot
>       : ^^^^^
>robotB : Robot
>       : ^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
