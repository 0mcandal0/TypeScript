//// [tests/cases/compiler/propertiesAndIndexersForNumericNames.ts] ////

=== propertiesAndIndexersForNumericNames.ts ===
class C {
>C : C
>  : ^

    [i: number]: number;
>i : number
>  : ^^^^^^

    // These all have numeric names; they should error
    // because their types are not compatible with the numeric indexer.
    public "1": string = "number"; // Error
>"1" : string
>    : ^^^^^^
>"number" : string
>         : ^^^^^^

    public "-1": string = "negative number"; // Error
>"-1" : string
>     : ^^^^^^
>"negative number" : string
>                  : ^^^^^^

    public "-2.5": string = "negative number"; // Error
>"-2.5" : string
>       : ^^^^^^
>"negative number" : string
>                  : ^^^^^^

    public "3.141592": string = "pi-sitive number"; // Error
>"3.141592" : string
>           : ^^^^^^
>"pi-sitive number" : string
>                   : ^^^^^^

    public "1.2e-20": string = "really small number"; // Error
>"1.2e-20" : string
>          : ^^^^^^
>"really small number" : string
>                      : ^^^^^^

    public "Infinity": string = "A gillion"; // Error
>"Infinity" : string
>           : ^^^^^^
>"A gillion" : string
>            : ^^^^^^

    public "-Infinity": string = "Negative-a-gillion"; // Error
>"-Infinity" : string
>            : ^^^^^^
>"Negative-a-gillion" : string
>                     : ^^^^^^

    public "NaN": string = "not a number"; // Error
>"NaN" : string
>      : ^^^^^^
>"not a number" : string
>               : ^^^^^^
    
    // These all have *partially* numeric names,
    // but should really be treated as plain string literals.
    public " 1": string = "leading space"; // No error
>" 1" : string
>     : ^^^^^^
>"leading space" : string
>                : ^^^^^^

    public "1    ": string = "trailing space"; // No error
>"1    " : string
>        : ^^^^^^
>"trailing space" : string
>                 : ^^^^^^

    public "": string = "no nothing"; // No error
>"" : string
>   : ^^^^^^
>"no nothing" : string
>             : ^^^^^^

    public "    ": string = "just space"; // No error
>"    " : string
>       : ^^^^^^
>"just space" : string
>             : ^^^^^^

    public "1 0 1": string = "several numbers and spaces"; // No error
>"1 0 1" : string
>        : ^^^^^^
>"several numbers and spaces" : string
>                             : ^^^^^^

    public "hunter2": string = "not a password"; // No error
>"hunter2" : string
>          : ^^^^^^
>"not a password" : string
>                 : ^^^^^^

    public "+Infinity": string = "A gillion"; // No error
>"+Infinity" : string
>            : ^^^^^^
>"A gillion" : string
>            : ^^^^^^

    public "+NaN": string = "not a positive number"; // No error
>"+NaN" : string
>       : ^^^^^^
>"not a positive number" : string
>                        : ^^^^^^

    public "-NaN": string = "not a negative number"; // No error
>"-NaN" : string
>       : ^^^^^^
>"not a negative number" : string
>                        : ^^^^^^
    

    // These fall into the above category, however, they are "trickier";
    // these all are *scanned* as numeric literals, but they are not written in
    // "canonical" numeric representations.
    public "+1": string = "positive number (for the paranoid)"; // No error
>"+1" : string
>     : ^^^^^^
>"positive number (for the paranoid)" : string
>                                     : ^^^^^^

    public "1e0": string = "just one"; // No error
>"1e0" : string
>      : ^^^^^^
>"just one" : string
>           : ^^^^^^

    public "-0": string = "just zero"; // No error
>"-0" : string
>     : ^^^^^^
>"just zero" : string
>            : ^^^^^^

    public "-0e0": string = "just zero"; // No error
>"-0e0" : string
>       : ^^^^^^
>"just zero" : string
>            : ^^^^^^

    public "0xF00D": string = "hex food"; // No error
>"0xF00D" : string
>         : ^^^^^^
>"hex food" : string
>           : ^^^^^^

    public "0xBEEF": string = "hex beef"; // No error
>"0xBEEF" : string
>         : ^^^^^^
>"hex beef" : string
>           : ^^^^^^

    public "0123": string = "oct 83"; // No error
>"0123" : string
>       : ^^^^^^
>"oct 83" : string
>         : ^^^^^^

    public "0o123": string = "explicit oct 83"; // No error
>"0o123" : string
>        : ^^^^^^
>"explicit oct 83" : string
>                  : ^^^^^^

    public "0b101101001010": string = "explicit binary"; // No error
>"0b101101001010" : string
>                 : ^^^^^^
>"explicit binary" : string
>                  : ^^^^^^

    public "0.000000000000000000012": string = "should've been in exponential form"; // No error
>"0.000000000000000000012" : string
>                          : ^^^^^^
>"should've been in exponential form" : string
>                                     : ^^^^^^
}

