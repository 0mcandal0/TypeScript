//// [tests/cases/compiler/dependentReturnType2.ts] ////

=== dependentReturnType2.ts ===
// If during narrowing, one of the conditional types in the distribution doesn't narrow, then the whole type will not be narrowed
function whoKnows<T extends string | number | undefined>(x: T): T extends true ? 1 : T extends false ? 2 : 3 {
>whoKnows : Symbol(whoKnows, Decl(dependentReturnType2.ts, 0, 0))
>T : Symbol(T, Decl(dependentReturnType2.ts, 1, 18))
>x : Symbol(x, Decl(dependentReturnType2.ts, 1, 57))
>T : Symbol(T, Decl(dependentReturnType2.ts, 1, 18))
>T : Symbol(T, Decl(dependentReturnType2.ts, 1, 18))
>T : Symbol(T, Decl(dependentReturnType2.ts, 1, 18))

    if (typeof x !== "string") {
>x : Symbol(x, Decl(dependentReturnType2.ts, 1, 57))

        return 3;
    }
}
