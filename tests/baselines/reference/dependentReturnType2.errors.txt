dependentReturnType2.ts(2,65): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
dependentReturnType2.ts(4,9): error TS2322: Type '3' is not assignable to type 'T extends true ? 1 : T extends false ? 2 : 3'.
dependentReturnType2.ts(16,5): error TS2322: Type 'number' is not assignable to type 'never'.


==== dependentReturnType2.ts (3 errors) ====
    // If during narrowing, one of the conditional types in the distribution doesn't narrow, then the whole type will not be narrowed
    function whoKnows<T extends string | number | undefined>(x: T): T extends true ? 1 : T extends false ? 2 : 3 {
                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
        if (typeof x !== "string") {
            return 3;
            ~~~~~~
!!! error TS2322: Type '3' is not assignable to type 'T extends true ? 1 : T extends false ? 2 : 3'.
        }
    }
    
    // If the conditional type's input is `never`, then it resolves to `never`:
    function neverOk<T extends boolean>(x: T): T extends true ? 1 : T extends false ? 2 : 1 | 2 {
        if (x === true) {
            return 1;
        }
        if (x === false) {
            return 2;
        }
        return 1;
        ~~~~~~
!!! error TS2322: Type 'number' is not assignable to type 'never'.
    }