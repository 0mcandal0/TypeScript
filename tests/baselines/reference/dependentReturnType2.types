//// [tests/cases/compiler/dependentReturnType2.ts] ////

=== dependentReturnType2.ts ===
declare function q(x: object): x is { b: number };
>q : (x: object) => x is { b: number; }
>x : object
>b : number

function foo<T extends { a: string } | { b: number }>(x: T): T extends { a: string } ? number : (string | number) {
>foo : <T extends { a: string; } | { b: number; }>(x: T) => T extends {    a: string;} ? number : (string | number)
>a : string
>b : number
>x : T
>a : string

    if (q(x)) {
>q(x) : boolean
>q : (x: object) => x is { b: number; }
>x : { a: string; } | { b: number; }

        x.b;
>x.b : number
>x : { b: number; }
>b : number

        return "";
>"" : ""
    }
}

let y = { a: "", b: 1 }
>y : { a: string; b: number; }
>{ a: "", b: 1 } : { a: string; b: number; }
>a : string
>"" : ""
>b : number
>1 : 1

const r = foo<{ a: string }>(y); // number
>r : number
>foo<{ a: string }>(y) : number
>foo : <T extends { a: string; } | { b: number; }>(x: T) => T extends { a: string; } ? number : string | number
>a : string
>y : { a: string; b: number; }

