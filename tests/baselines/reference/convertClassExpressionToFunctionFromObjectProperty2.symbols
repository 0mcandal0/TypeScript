=== tests/cases/compiler/convertClassExpressionToFunctionFromObjectProperty2.ts ===
({
    x: class {
>x : Symbol(x, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 0, 2))
>class {        constructor() { }    } : Symbol(x, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 1, 6))

        constructor() { }
    },
    y: class {
>y : Symbol(y, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 3, 6))
>class {        constructor() { }    } : Symbol(y, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 4, 6))

        constructor() { }
    },

    // keywords
    break: class {
>break : Symbol(break, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 6, 6))
>class {        constructor() { }    } : Symbol(break, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 9, 10))

        constructor() { }
    },
    case: class {
>case : Symbol(case, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 11, 6))
>class {        constructor() { }    } : Symbol(case, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 12, 9))

        constructor() { }
    },
    catch: class {
>catch : Symbol(catch, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 14, 6))
>class {        constructor() { }    } : Symbol(catch, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 15, 10))

        constructor() { }
    },
    class: class {
>class : Symbol(class, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 17, 6))
>class {        constructor() { }    } : Symbol(class, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 18, 10))

        constructor() { }
    },
    const: class {
>const : Symbol(const, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 20, 6))
>class {        constructor() { }    } : Symbol(const, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 21, 10))

        constructor() { }
    },
    continue: class {
>continue : Symbol(continue, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 23, 6))
>class {        constructor() { }    } : Symbol(continue, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 24, 13))

        constructor() { }
    },
    debugger: class {
>debugger : Symbol(debugger, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 26, 6))
>class {        constructor() { }    } : Symbol(debugger, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 27, 13))

        constructor() { }
    },
    default: class {
>default : Symbol(default, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 29, 6))
>class {        constructor() { }    } : Symbol(default, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 30, 12))

        constructor() { }
    },
    delete: class {
>delete : Symbol(delete, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 32, 6))
>class {        constructor() { }    } : Symbol(delete, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 33, 11))

        constructor() { }
    },
    do: class {
>do : Symbol(do, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 35, 6))
>class {        constructor() { }    } : Symbol(do, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 36, 7))

        constructor() { }
    },
    else: class {
>else : Symbol(else, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 38, 6))
>class {        constructor() { }    } : Symbol(else, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 39, 9))

        constructor() { }
    },
    enum: class {
>enum : Symbol(enum, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 41, 6))
>class {        constructor() { }    } : Symbol(enum, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 42, 9))

        constructor() { }
    },
    export: class {
>export : Symbol(export, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 44, 6))
>class {        constructor() { }    } : Symbol(export, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 45, 11))

        constructor() { }
    },
    extends: class {
>extends : Symbol(extends, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 47, 6))
>class {        constructor() { }    } : Symbol(extends, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 48, 12))

        constructor() { }
    },
    false: class {
>false : Symbol(false, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 50, 6))
>class {        constructor() { }    } : Symbol(false, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 51, 10))

        constructor() { }
    },
    finally: class {
>finally : Symbol(finally, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 53, 6))
>class {        constructor() { }    } : Symbol(finally, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 54, 12))

        constructor() { }
    },
    for: class {
>for : Symbol(for, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 56, 6))
>class {        constructor() { }    } : Symbol(for, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 57, 8))

        constructor() { }
    },
    function: class {
>function : Symbol(function, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 59, 6))
>class {        constructor() { }    } : Symbol(function, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 60, 13))

        constructor() { }
    },
    if: class {
>if : Symbol(if, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 62, 6))
>class {        constructor() { }    } : Symbol(if, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 63, 7))

        constructor() { }
    },
    import: class {
>import : Symbol(import, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 65, 6))
>class {        constructor() { }    } : Symbol(import, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 66, 11))

        constructor() { }
    },
    in: class {
>in : Symbol(in, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 68, 6))
>class {        constructor() { }    } : Symbol(in, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 69, 7))

        constructor() { }
    },
    instanceof: class {
>instanceof : Symbol(instanceof, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 71, 6))
>class {        constructor() { }    } : Symbol(instanceof, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 72, 15))

        constructor() { }
    },
    new: class {
>new : Symbol(new, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 74, 6))
>class {        constructor() { }    } : Symbol(new, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 75, 8))

        constructor() { }
    },
    null: class {
>null : Symbol(null, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 77, 6))
>class {        constructor() { }    } : Symbol(null, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 78, 9))

        constructor() { }
    },
    return: class {
>return : Symbol(return, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 80, 6))
>class {        constructor() { }    } : Symbol(return, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 81, 11))

        constructor() { }
    },
    super: class {
>super : Symbol(super, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 83, 6))
>class {        constructor() { }    } : Symbol(super, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 84, 10))

        constructor() { }
    },
    switch: class {
>switch : Symbol(switch, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 86, 6))
>class {        constructor() { }    } : Symbol(switch, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 87, 11))

        constructor() { }
    },
    this: class {
>this : Symbol(this, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 89, 6))
>class {        constructor() { }    } : Symbol(this, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 90, 9))

        constructor() { }
    },
    throw: class {
>throw : Symbol(throw, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 92, 6))
>class {        constructor() { }    } : Symbol(throw, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 93, 10))

        constructor() { }
    },
    true: class {
>true : Symbol(true, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 95, 6))
>class {        constructor() { }    } : Symbol(true, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 96, 9))

        constructor() { }
    },
    try: class {
>try : Symbol(try, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 98, 6))
>class {        constructor() { }    } : Symbol(try, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 99, 8))

        constructor() { }
    },
    typeof: class {
>typeof : Symbol(typeof, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 101, 6))
>class {        constructor() { }    } : Symbol(typeof, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 102, 11))

        constructor() { }
    },
    var: class {
>var : Symbol(var, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 104, 6))
>class {        constructor() { }    } : Symbol(var, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 105, 8))

        constructor() { }
    },
    void: class {
>void : Symbol(void, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 107, 6))
>class {        constructor() { }    } : Symbol(void, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 108, 9))

        constructor() { }
    },
    while: class {
>while : Symbol(while, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 110, 6))
>class {        constructor() { }    } : Symbol(while, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 111, 10))

        constructor() { }
    },
    with: class {
>with : Symbol(with, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 113, 6))
>class {        constructor() { }    } : Symbol(with, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 114, 9))

        constructor() { }
    },
    implements: class {
>implements : Symbol(implements, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 116, 6))
>class {        constructor() { }    } : Symbol(implements, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 117, 15))

        constructor() { }
    },
    interface: class {
>interface : Symbol(interface, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 119, 6))
>class {        constructor() { }    } : Symbol(interface, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 120, 14))

        constructor() { }
    },
    let: class {
>let : Symbol(let, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 122, 6))
>class {        constructor() { }    } : Symbol(let, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 123, 8))

        constructor() { }
    },
    package: class {
>package : Symbol(package, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 125, 6))
>class {        constructor() { }    } : Symbol(package, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 126, 12))

        constructor() { }
    },
    private: class {
>private : Symbol(private, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 128, 6))
>class {        constructor() { }    } : Symbol(private, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 129, 12))

        constructor() { }
    },
    protected: class {
>protected : Symbol(protected, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 131, 6))
>class {        constructor() { }    } : Symbol(protected, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 132, 14))

        constructor() { }
    },
    public: class {
>public : Symbol(public, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 134, 6))
>class {        constructor() { }    } : Symbol(public, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 135, 11))

        constructor() { }
    },
    static: class {
>static : Symbol(static, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 137, 6))
>class {        constructor() { }    } : Symbol(static, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 138, 11))

        constructor() { }
    },
    yield: class {
>yield : Symbol(yield, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 140, 6))
>class {        constructor() { }    } : Symbol(yield, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 141, 10))

        constructor() { }
    },
    abstract: class {
>abstract : Symbol(abstract, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 143, 6))
>class {        constructor() { }    } : Symbol(abstract, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 144, 13))

        constructor() { }
    },
    as: class {
>as : Symbol(as, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 146, 6))
>class {        constructor() { }    } : Symbol(as, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 147, 7))

        constructor() { }
    },
    asserts: class {
>asserts : Symbol(asserts, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 149, 6))
>class {        constructor() { }    } : Symbol(asserts, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 150, 12))

        constructor() { }
    },
    any: class {
>any : Symbol(any, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 152, 6))
>class {        constructor() { }    } : Symbol(any, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 153, 8))

        constructor() { }
    },
    async: class {
>async : Symbol(async, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 155, 6))
>class {        constructor() { }    } : Symbol(async, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 156, 10))

        constructor() { }
    },
    await: class {
>await : Symbol(await, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 158, 6))
>class {        constructor() { }    } : Symbol(await, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 159, 10))

        constructor() { }
    },
    boolean: class {
>boolean : Symbol(boolean, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 161, 6))
>class {        constructor() { }    } : Symbol(boolean, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 162, 12))

        constructor() { }
    },
    constructor: class {
>constructor : Symbol(constructor, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 164, 6))
>class {        constructor() { }    } : Symbol(constructor, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 165, 16))

        constructor() { }
    },
    declare: class {
>declare : Symbol(declare, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 167, 6))
>class {        constructor() { }    } : Symbol(declare, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 168, 12))

        constructor() { }
    },
    get: class {
>get : Symbol(get, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 170, 6))
>class {        constructor() { }    } : Symbol(get, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 171, 8))

        constructor() { }
    },
    infer: class {
>infer : Symbol(infer, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 173, 6))
>class {        constructor() { }    } : Symbol(infer, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 174, 10))

        constructor() { }
    },
    is: class {
>is : Symbol(is, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 176, 6))
>class {        constructor() { }    } : Symbol(is, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 177, 7))

        constructor() { }
    },
    keyof: class {
>keyof : Symbol(keyof, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 179, 6))
>class {        constructor() { }    } : Symbol(keyof, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 180, 10))

        constructor() { }
    },
    module: class {
>module : Symbol(module, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 182, 6))
>class {        constructor() { }    } : Symbol(module, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 183, 11))

        constructor() { }
    },
    namespace: class {
>namespace : Symbol(namespace, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 185, 6))
>class {        constructor() { }    } : Symbol(namespace, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 186, 14))

        constructor() { }
    },
    never: class {
>never : Symbol(never, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 188, 6))
>class {        constructor() { }    } : Symbol(never, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 189, 10))

        constructor() { }
    },
    readonly: class {
>readonly : Symbol(readonly, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 191, 6))
>class {        constructor() { }    } : Symbol(readonly, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 192, 13))

        constructor() { }
    },
    require: class {
>require : Symbol(require, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 194, 6))
>class {        constructor() { }    } : Symbol(require, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 195, 12))

        constructor() { }
    },
    number: class {
>number : Symbol(number, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 197, 6))
>class {        constructor() { }    } : Symbol(number, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 198, 11))

        constructor() { }
    },
    object: class {
>object : Symbol(object, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 200, 6))
>class {        constructor() { }    } : Symbol(object, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 201, 11))

        constructor() { }
    },
    set: class {
>set : Symbol(set, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 203, 6))
>class {        constructor() { }    } : Symbol(set, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 204, 8))

        constructor() { }
    },
    string: class {
>string : Symbol(string, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 206, 6))
>class {        constructor() { }    } : Symbol(string, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 207, 11))

        constructor() { }
    },
    symbol: class {
>symbol : Symbol(symbol, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 209, 6))
>class {        constructor() { }    } : Symbol(symbol, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 210, 11))

        constructor() { }
    },
    type: class {
>type : Symbol(type, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 212, 6))
>class {        constructor() { }    } : Symbol(type, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 213, 9))

        constructor() { }
    },
    undefined: class {
>undefined : Symbol(undefined, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 215, 6))
>class {        constructor() { }    } : Symbol(undefined, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 216, 14))

        constructor() { }
    },
    unique: class {
>unique : Symbol(unique, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 218, 6))
>class {        constructor() { }    } : Symbol(unique, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 219, 11))

        constructor() { }
    },
    unknown: class {
>unknown : Symbol(unknown, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 221, 6))
>class {        constructor() { }    } : Symbol(unknown, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 222, 12))

        constructor() { }
    },
    from: class {
>from : Symbol(from, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 224, 6))
>class {        constructor() { }    } : Symbol(from, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 225, 9))

        constructor() { }
    },
    global: class {
>global : Symbol(global, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 227, 6))
>class {        constructor() { }    } : Symbol(global, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 228, 11))

        constructor() { }
    },
    bigint: class {
>bigint : Symbol(bigint, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 230, 6))
>class {        constructor() { }    } : Symbol(bigint, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 231, 11))

        constructor() { }
    },
    of: class {
>of : Symbol(of, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 233, 6))
>class {        constructor() { }    } : Symbol(of, Decl(convertClassExpressionToFunctionFromObjectProperty2.ts, 234, 7))

        constructor() { }
    }
})

