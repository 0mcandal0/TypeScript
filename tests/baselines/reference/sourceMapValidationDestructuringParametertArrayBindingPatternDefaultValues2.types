//// [tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues2.ts] ////

=== sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues2.ts ===
declare var console: {
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^

    log(msg: any): void;
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>msg : any
}
type Robot = [string, string[]];
>Robot : Robot
>      : ^^^^^

var robotA: Robot = ["trimmer", ["trimming", "edging"]];
>robotA : Robot
>       : ^^^^^
>["trimmer", ["trimming", "edging"]] : [string, string[]]
>                                    : ^^^^^^^^^^^^^^^^^^
>"trimmer" : string
>          : ^^^^^^
>["trimming", "edging"] : string[]
>                       : ^^^^^^^^
>"trimming" : string
>           : ^^^^^^
>"edging" : string
>         : ^^^^^^

function foo1([, skillA = ["noSkill", "noSkill"]]: Robot= ["name", ["skill1", "skill2"]]) {
>foo1 : ([, skillA]?: Robot) => void
>     : ^          ^^^     ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>skillA : string[]
>       : ^^^^^^^^
>["noSkill", "noSkill"] : string[]
>                       : ^^^^^^^^
>"noSkill" : string
>          : ^^^^^^
>"noSkill" : string
>          : ^^^^^^
>["name", ["skill1", "skill2"]] : [string, string[]]
>                               : ^^^^^^^^^^^^^^^^^^
>"name" : string
>       : ^^^^^^
>["skill1", "skill2"] : string[]
>                     : ^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^

    console.log(skillA);
>console.log(skillA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>skillA : string[]
>       : ^^^^^^^^
}

function foo2([nameMB = "noName"]: Robot = ["name", ["skill1", "skill2"]]) {
>foo2 : ([nameMB]?: Robot) => void
>     : ^        ^^^     ^^^^^^^^^
>nameMB : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^
>["name", ["skill1", "skill2"]] : [string, string[]]
>                               : ^^^^^^^^^^^^^^^^^^
>"name" : string
>       : ^^^^^^
>["skill1", "skill2"] : string[]
>                     : ^^^^^^^^
>"skill1" : string
>         : ^^^^^^
>"skill2" : string
>         : ^^^^^^

    console.log(nameMB);
>console.log(nameMB) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMB : string
>       : ^^^^^^
}

function foo3([nameMA = "noName", [
>foo3 : ([nameMA, [primarySkillA, secondarySkillA]]: Robot) => void
>     : ^                                          ^^     ^^^^^^^^^
>nameMA : string
>       : ^^^^^^
>"noName" : string
>         : ^^^^^^

    primarySkillA = "primary",
>primarySkillA : string
>              : ^^^^^^
>"primary" : "primary"
>          : ^^^^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : "secondary"
>            : ^^^^^^^^^^^

] = ["noSkill", "noSkill"]]: Robot) {
>["noSkill", "noSkill"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"noSkill" : string
>          : ^^^^^^
>"noSkill" : string
>          : ^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}

foo1(robotA);
>foo1(robotA) : void
>             : ^^^^
>foo1 : ([, skillA]?: Robot) => void
>     : ^          ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo1(["roomba", ["vacuum", "mopping"]]);
>foo1(["roomba", ["vacuum", "mopping"]]) : void
>                                        : ^^^^
>foo1 : ([, skillA]?: Robot) => void
>     : ^          ^^^     ^^^^^^^^^
>["roomba", ["vacuum", "mopping"]] : [string, string[]]
>                                  : ^^^^^^^^^^^^^^^^^^
>"roomba" : string
>         : ^^^^^^
>["vacuum", "mopping"] : string[]
>                      : ^^^^^^^^
>"vacuum" : string
>         : ^^^^^^
>"mopping" : string
>          : ^^^^^^

foo2(robotA);
>foo2(robotA) : void
>             : ^^^^
>foo2 : ([nameMB]?: Robot) => void
>     : ^        ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo2(["roomba", ["vacuum", "mopping"]]);
>foo2(["roomba", ["vacuum", "mopping"]]) : void
>                                        : ^^^^
>foo2 : ([nameMB]?: Robot) => void
>     : ^        ^^^     ^^^^^^^^^
>["roomba", ["vacuum", "mopping"]] : [string, string[]]
>                                  : ^^^^^^^^^^^^^^^^^^
>"roomba" : string
>         : ^^^^^^
>["vacuum", "mopping"] : string[]
>                      : ^^^^^^^^
>"vacuum" : string
>         : ^^^^^^
>"mopping" : string
>          : ^^^^^^

foo3(robotA);
>foo3(robotA) : void
>             : ^^^^
>foo3 : ([nameMA, [primarySkillA, secondarySkillA]]: Robot) => void
>     : ^                                          ^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo3(["roomba", ["vacuum", "mopping"]]);
>foo3(["roomba", ["vacuum", "mopping"]]) : void
>                                        : ^^^^
>foo3 : ([nameMA, [primarySkillA, secondarySkillA]]: Robot) => void
>     : ^                                          ^^     ^^^^^^^^^
>["roomba", ["vacuum", "mopping"]] : [string, string[]]
>                                  : ^^^^^^^^^^^^^^^^^^
>"roomba" : string
>         : ^^^^^^
>["vacuum", "mopping"] : string[]
>                      : ^^^^^^^^
>"vacuum" : string
>         : ^^^^^^
>"mopping" : string
>          : ^^^^^^

