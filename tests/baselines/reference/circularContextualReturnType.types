=== tests/cases/compiler/circularContextualReturnType.ts ===
// Repro from #17711

Object.freeze({
>Object.freeze({    foo() {        return Object.freeze('a');    },}) : Readonly<{ readonly foo: () => "a"; }>
>Object.freeze : { <T extends Function>(f: T): T; <const T>(o: T): Readonly<T>; }
>Object : ObjectConstructor
>freeze : { <T extends Function>(f: T): T; <const T>(o: T): Readonly<T>; }
>{    foo() {        return Object.freeze('a');    },} : { foo(): "a"; }

    foo() {
>foo : () => "a"

        return Object.freeze('a');
>Object.freeze('a') : "a"
>Object.freeze : { <T extends Function>(f: T): T; <const T>(o: T): Readonly<T>; }
>Object : ObjectConstructor
>freeze : { <T extends Function>(f: T): T; <const T>(o: T): Readonly<T>; }
>'a' : "a"

    },
});

