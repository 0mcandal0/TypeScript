//// [tests/cases/compiler/errorCause.ts] ////

=== errorCause.ts ===
declare const a: unknown;
>a : unknown
>  : ^^^^^^^

let err = new Error("foo", { cause: new Error("bar") });
>err : Error
>    : ^^^^^
>new Error("foo", { cause: new Error("bar") }) : Error
>                                              : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

err.cause;
>err.cause : unknown
>          : ^^^^^^^
>err : Error
>    : ^^^^^
>cause : unknown
>      : ^^^^^^^

let anotherErr = new Error("foo", { cause: a });
>anotherErr : Error
>           : ^^^^^
>new Error("foo", { cause: a }) : Error
>                               : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: a } : { cause: unknown; }
>             : ^^^^^^^^^^^^^^^^^^^
>cause : unknown
>      : ^^^^^^^
>a : unknown
>  : ^^^^^^^

anotherErr.cause;
>anotherErr.cause : unknown
>                 : ^^^^^^^
>anotherErr : Error
>           : ^^^^^
>cause : unknown
>      : ^^^^^^^

new EvalError("foo", { cause: new Error("bar") });
>new EvalError("foo", { cause: new Error("bar") }) : EvalError
>                                                  : ^^^^^^^^^
>EvalError : EvalErrorConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

new EvalError("foo", { cause: a });
>new EvalError("foo", { cause: a }) : EvalError
>                                   : ^^^^^^^^^
>EvalError : EvalErrorConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: a } : { cause: unknown; }
>             : ^^^^^^^^^^^^^^^^^^^
>cause : unknown
>      : ^^^^^^^
>a : unknown
>  : ^^^^^^^

new RangeError("foo", { cause: new Error("bar") });
>new RangeError("foo", { cause: new Error("bar") }) : RangeError
>                                                   : ^^^^^^^^^^
>RangeError : RangeErrorConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

new ReferenceError("foo", { cause: new Error("bar") });
>new ReferenceError("foo", { cause: new Error("bar") }) : ReferenceError
>                                                       : ^^^^^^^^^^^^^^
>ReferenceError : ReferenceErrorConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

new SyntaxError("foo", { cause: new Error("bar") });
>new SyntaxError("foo", { cause: new Error("bar") }) : SyntaxError
>                                                    : ^^^^^^^^^^^
>SyntaxError : SyntaxErrorConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

new TypeError("foo", { cause: new Error("bar") });
>new TypeError("foo", { cause: new Error("bar") }) : TypeError
>                                                  : ^^^^^^^^^
>TypeError : TypeErrorConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

new URIError("foo", { cause: new Error("bar") });
>new URIError("foo", { cause: new Error("bar") }) : URIError
>                                                 : ^^^^^^^^
>URIError : URIErrorConstructor
>         : ^^^^^^^^^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

new AggregateError([], "foo", { cause: new Error("bar") });
>new AggregateError([], "foo", { cause: new Error("bar") }) : AggregateError
>                                                           : ^^^^^^^^^^^^^^
>AggregateError : AggregateErrorConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>"foo" : string
>      : ^^^^^^
>{ cause: new Error("bar") } : { cause: Error; }
>                            : ^^^^^^^^^^^^^^^^^
>cause : Error
>      : ^^^^^
>new Error("bar") : Error
>                 : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"bar" : string
>      : ^^^^^^

