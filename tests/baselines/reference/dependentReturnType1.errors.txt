dependentReturnType1.ts(11,9): error TS2322: Type 'number' is not assignable to type 'string'.
dependentReturnType1.ts(26,9): error TS2322: Type 'string' is not assignable to type 'never'.
dependentReturnType1.ts(35,9): error TS2322: Type 'string' is not assignable to type 'never'.
dependentReturnType1.ts(70,9): error TS2322: Type '{ a: "a"; }' is not assignable to type 'T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : Four'.
dependentReturnType1.ts(74,5): error TS2322: Type '{ a: "a"; b: "b"; c: "c"; d: "d"; e: "e"; f: "f"; g: "g"; }' is not assignable to type 'Three & (T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : Four)'.
  Type '{ a: "a"; b: "b"; c: "c"; d: "d"; e: "e"; f: "f"; g: "g"; }' is not assignable to type 'T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : Four'.
dependentReturnType1.ts(80,9): error TS2322: Type '{ a: "a"; }' is not assignable to type 'T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : T extends 4 ? Four : One | Two | Three | Four'.
dependentReturnType1.ts(84,22): error TS2353: Object literal may only specify known properties, and 'b' does not exist in type 'Three & Four'.
dependentReturnType1.ts(99,9): error TS2322: Type 'RightOut' is not assignable to type 'Arg extends LeftIn ? LeftOut : RightOut'.
dependentReturnType1.ts(118,5): error TS2322: Type 'string' is not assignable to type 'T extends Dog ? number : string'.
dependentReturnType1.ts(153,13): error TS2322: Type 'string' is not assignable to type 'T extends string ? this : string'.
dependentReturnType1.ts(155,9): error TS2322: Type 'this' is not assignable to type 'T extends string ? this : string'.
  Type 'Unnamed' is not assignable to type 'T extends string ? this : string'.
dependentReturnType1.ts(159,9): error TS2322: Type 'this' is not assignable to type '(T extends string ? this : string) & (T extends string ? this : string)'.
  Type 'Unnamed' is not assignable to type '(T extends string ? this : string) & (T extends string ? this : string)'.
    Type 'Unnamed' is not assignable to type 'T extends string ? this : string'.
      Type 'this' is not assignable to type 'T extends string ? this : string'.
        Type 'Unnamed' is not assignable to type 'T extends string ? this : string'.
dependentReturnType1.ts(174,13): error TS2322: Type 'this' is not assignable to type 'string'.
  Type 'Unnamed' is not assignable to type 'string'.
dependentReturnType1.ts(177,9): error TS2322: Type 'T & {}' is not assignable to type 'this'.
  'this' could be instantiated with an arbitrary type which could be unrelated to 'T & {}'.
dependentReturnType1.ts(207,24): error TS2322: Type 'string' is not assignable to type 'number'.
dependentReturnType1.ts(207,28): error TS2322: Type 'number' is not assignable to type 'string'.
dependentReturnType1.ts(232,47): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
dependentReturnType1.ts(234,9): error TS2322: Type '""' is not assignable to type 'T extends 1 ? string : boolean'.
dependentReturnType1.ts(240,62): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
dependentReturnType1.ts(243,9): error TS2322: Type 'string' is not assignable to type 'T extends { a: string; } ? number : string | number'.
dependentReturnType1.ts(268,9): error TS2322: Type '1' is not assignable to type 'HelperCond<{ x: U; y: V; }, { x: string; y: true; }, 1, { x: number; y: false; }, 2>'.
dependentReturnType1.ts(271,9): error TS2322: Type '2' is not assignable to type 'HelperCond<{ x: U; y: V; }, { x: string; y: true; }, 1, { x: number; y: false; }, 2>'.
dependentReturnType1.ts(273,5): error TS2322: Type '0' is not assignable to type 'HelperCond<{ x: U; y: V; }, { x: string; y: true; }, 1, { x: number; y: false; }, 2>'.
dependentReturnType1.ts(291,9): error TS2322: Type 'string' is not assignable to type 'string[]'.


==== dependentReturnType1.ts (24 errors) ====
    interface A {
        1: number;
        2: string;
    }
    
    function f1<T extends 1 | 2>(x: T): A[T] {
        if (x === 1) {
            return 0; // Ok
        }
        else {
            return 1; // Error
            ~~~~~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
        }
    }
    
    interface C {
        1: number;
        2: string;
        3: boolean;
    }
    
    function f2<T extends 1 | 2 | 3>(x: T): C[T] {
        if (x === 1) {
            return 0; // Ok
        }
        else {
            return ""; // Error, returned expression needs to have type string & boolean (= never)
            ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'never'.
        }
    }
    
    function f3<T extends 1 | 2 | 3>(x: T): T extends 1 ? number : T extends 2 ? string : T extends 3 ? boolean : never {
        if (x === 1) {
            return 0; // Ok
        }
        else {
            return ""; // Error, returned expression needs to have type string & boolean (= never)
            ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'never'.
        }
    }
    
    interface One {
        a: "a";
        b: "b";
        c: "c";
        d: "d";
    }
    
    interface Two {
        a: "a";
        b: "b";
        e: "e";
        f: "f";
    }
    
    interface Three {
        a: "a";
        c: "c";
        e: "e";
        g: "g";
    }
    
    interface Four {
        a: "a";
        d: "d";
        f: "f";
        g: "g";
    }
    
    function f10<T extends 1 | 2 | 3 | 4>(x: T): T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : Four { // Badly written conditional
        if (x === 1 || x === 2) {
            return { a: "a", b: "b", c: "c", d: "d", e: "e", f: "f" }; // Ok
            return { a: "a" }; // Error
            ~~~~~~
!!! error TS2322: Type '{ a: "a"; }' is not assignable to type 'T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : Four'.
        }
        // Excess property becomes a problem with the change,
        // because we now check assignability to a narrower type...
        return { a: "a", b: "b", c: "c", d: "d", e: "e", f: "f", g: "g" }; // Error
        ~~~~~~
!!! error TS2322: Type '{ a: "a"; b: "b"; c: "c"; d: "d"; e: "e"; f: "f"; g: "g"; }' is not assignable to type 'Three & (T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : Four)'.
!!! error TS2322:   Type '{ a: "a"; b: "b"; c: "c"; d: "d"; e: "e"; f: "f"; g: "g"; }' is not assignable to type 'T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : Four'.
    }
    
    function f101<T extends 1 | 2 | 3 | 4>(x: T): T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : T extends 4 ? Four : One | Two | Three | Four { // Well written conditional
        if (x === 1 || x === 2) {
            return { a: "a", b: "b", c: "c", d: "d", e: "e", f: "f" }; // Ok
            return { a: "a" }; // Error
            ~~~~~~
!!! error TS2322: Type '{ a: "a"; }' is not assignable to type 'T extends 1 ? One : T extends 2 ? Two : T extends 3 ? Three : T extends 4 ? Four : One | Two | Three | Four'.
        }
        // Excess property becomes a problem with the change,
        // because we now check assignability to a narrower type...
        return { a: "a", b: "b", c: "c", d: "d", e: "e", f: "f", g: "g" }; // Error
                         ~
!!! error TS2353: Object literal may only specify known properties, and 'b' does not exist in type 'Three & Four'.
    }
    
    // Asymmetry
    function conditionalProducingIf<LeftIn, RightIn, LeftOut, RightOut, Arg extends LeftIn | RightIn>(
        arg: Arg,
        cond: (arg: LeftIn | RightIn) => arg is LeftIn,
        produceLeftOut: (arg: LeftIn) => LeftOut,
        produceRightOut: (arg: RightIn) => RightOut):
        Arg extends LeftIn ? LeftOut : RightOut
    {
        type OK = Arg extends LeftIn ? LeftOut : RightOut;
        if (cond(arg)) {
            return produceLeftOut(arg); // Ok
        } else {
            return produceRightOut(arg as RightIn); // Error: Doesn't work because we don't narrow `arg` to `Arg & RightIn` here
            ~~~~~~
!!! error TS2322: Type 'RightOut' is not assignable to type 'Arg extends LeftIn ? LeftOut : RightOut'.
        }
    }
    
    interface Animal {
        name: string;
    }
    
    interface Dog extends Animal {
        bark: () => string;
    }
    
    // This is unsafe
    declare function isDog(x: Animal): x is Dog;
    declare function doggy(x: Dog): number;
    function f12<T extends Animal>(x: T): T extends Dog ? number : string {
        if (isDog(x)) { // `x` has type `T & Dog` here
            return doggy(x); // Ok
        }
        return ""; // Error: Should not work because we can't express "not a Dog" in the type system
        ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'T extends Dog ? number : string'.
    }
    
    // Cannot narrow `keyof` too eagerly or something like the below breaks
    function f<Entry extends { [index: string]: number | boolean }, EntryId extends keyof Entry>(entry: EntryId): Entry[EntryId] {
        const entries = {} as Entry;
        return entries[entry];
    }
    
    // Works the same as before
    declare function takeA(val: 'A'): void;
    export function bounceAndTakeIfA<AB extends 'A' | 'B'>(value: AB): AB {
        if (value === 'A') {
            takeA(value);
            takeAB(value);
            return value;
        }
    
        return value;
        function takeAB(val: AB): void {}
    }
    
    // Works the same as before
    export function bbb<AB extends "a" | "b">(value: AB): "a" {
        if (value === "a") {
            return value;
        }
        return "a";
    }
    
    class Unnamed {
        root!: { name: string };
        // Error because parameter is optional
        name<T extends string>(name?: T): T extends string ? this : string {
            if (typeof name === 'undefined') {
                return this.root.name;
                ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'T extends string ? this : string'.
            }
            return this;
            ~~~~~~
!!! error TS2322: Type 'this' is not assignable to type 'T extends string ? this : string'.
!!! error TS2322:   Type 'Unnamed' is not assignable to type 'T extends string ? this : string'.
        }
        // Error because parameter is optional?
        nameWithError<T extends string>(name?: T): T extends string ? this : string {
            return this; // Error: Investigate error message
            ~~~~~~
!!! error TS2322: Type 'this' is not assignable to type '(T extends string ? this : string) & (T extends string ? this : string)'.
!!! error TS2322:   Type 'Unnamed' is not assignable to type '(T extends string ? this : string) & (T extends string ? this : string)'.
!!! error TS2322:     Type 'Unnamed' is not assignable to type 'T extends string ? this : string'.
!!! error TS2322:       Type 'this' is not assignable to type 'T extends string ? this : string'.
!!! error TS2322:         Type 'Unnamed' is not assignable to type 'T extends string ? this : string'.
        }
    
        // Good conditional
        name2<T extends string | undefined>(name?: T): T extends string ? this : T extends undefined ? string : this | undefined {
            if (typeof name === 'undefined') {
                return this.root.name; // Ok
            }
            this.root.name = name;
            return this; // Ok
        }
    
        // Good conditional, wrong return expressions
        name3<T extends string | undefined>(name?: T): T extends string ? this : T extends undefined ? string : this | undefined {
            if (typeof name === 'undefined') {
                return this; // Error
                ~~~~~~
!!! error TS2322: Type 'this' is not assignable to type 'string'.
!!! error TS2322:   Type 'Unnamed' is not assignable to type 'string'.
            }
            this.root.name = name;
            return name; // Error
            ~~~~~~
!!! error TS2322: Type 'T & {}' is not assignable to type 'this'.
!!! error TS2322:   'this' could be instantiated with an arbitrary type which could be unrelated to 'T & {}'.
        }
    }
    
    interface Aa {
        1: number;
        2: string;
        3: string;
    }
    
    function trivialConditional<T extends 1 | 2 | 3>(x: T): Aa[T] {
        if (x !== 1) {
            return x === 2 ? "" : `${x}`;
        }
        else {
            return 0;
        }
    }
    
    // Conditional expressions
    function conditional<T extends boolean>(x: T):
     T extends true ? 1 : T extends false ? 2 : 1 | 2 {
        return x ? 1 : 2; // Ok
    }
    
    function contextualConditional<T extends "a" | "b">(x: T): T extends "a" ? "a" : T extends "b" ? number : "a" | number {
        return x === "a" ? x : parseInt(x); // Ok
    }
    
    function conditionalWithError<T extends "a" | "b">(x: T): T extends "a" ? number : T extends "b" ? string : number | string {
        return x === "a" ? x : parseInt(x); // Error
                           ~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
                               ~~~~~~~~~~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
    }
    
    // Multiple reductions
    interface BB {
        "a": number;
        [y: number]: string;
    }
    
    interface AA<T extends keyof BB> {
        "c": BB[T];
        "d": boolean,
    }
    
    function reduction<T extends keyof BB, U extends "c" | "d">(x: T, y: U): AA<T>[U] {
        if (y === "c" && x === "a") {
            // AA<T>[U='c'] -> BB[T]
            // BB[T='a'] -> number
            return 0; // Ok
        }
    
        return undefined as never;
    }
    
    // Substitution types are not narrowed?
    function subsCond<T extends 1 | 2 | 3>(x: T): T extends 1 | 2 ? (T extends 1 ? string : boolean) : number {
                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
        if (x === 1) {
            return "";
            ~~~~~~
!!! error TS2322: Type '""' is not assignable to type 'T extends 1 ? string : boolean'.
        }
    }
    
    // Unsafe: supertype problem
    declare function q(x: object): x is { b: number };
    function foo<T extends { a: string } | { b: number }>(x: T): T extends { a: string } ? number : (string | number) {
                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
        if (q(x)) {
            x.b;
            return "";
            ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'T extends { a: string; } ? number : string | number'.
        }
    }
    
    let y = { a: "", b: 1 }
    const r = foo<{ a: string }>(y); // number
    
    function lessBadFoo<T extends { a: string } | { b: number }>(x: T): T extends { b: number } ? string : T extends { a: string } ? number : (string | number) {
        if (q(x)) {
            x.b;
            return "";
        }
        return 2;
    }
    
    const r2 = lessBadFoo<{ a: string }>(y); // number, bad
    
    type HelperCond<T, A, R1, B, R2> = T extends A ? R1 : T extends B ? R2 : R1 | R2;
    
    // We don't narrow the return type because the conditionals are not distributive
    function foo2<U extends string | number, V extends boolean>(x: U, y: V):
        HelperCond<{ x: U, y: V },
            { x: string, y: true }, 1,
            { x: number, y: false }, 2> {
        if (typeof x === "string" && y === true) {
            return 1; // Error
            ~~~~~~
!!! error TS2322: Type '1' is not assignable to type 'HelperCond<{ x: U; y: V; }, { x: string; y: true; }, 1, { x: number; y: false; }, 2>'.
        }
        if (typeof x === "number" && y === false) {
            return 2; // Error
            ~~~~~~
!!! error TS2322: Type '2' is not assignable to type 'HelperCond<{ x: U; y: V; }, { x: string; y: true; }, 1, { x: number; y: false; }, 2>'.
        }
        return 0; // Error
        ~~~~~~
!!! error TS2322: Type '0' is not assignable to type 'HelperCond<{ x: U; y: V; }, { x: string; y: true; }, 1, { x: number; y: false; }, 2>'.
    }
    
    // From https://github.com/microsoft/TypeScript/issues/24929#issue-332087943
    declare function isString(s: unknown): s is string;
    // capitalize a string or each element of an array of strings
    function capitalize<T extends string | string[]>(input: T): T extends string[] ? string[] : T extends string ? string : string[] | string {
        if (isString(input)) {
            return input[0].toUpperCase() + input.slice(1); // Ok
        } else {
            return input.map(elt => capitalize(elt)); // Ok
        }
    }
    
    function badCapitalize<T extends string | string[]>(input: T): T extends string[] ? string[] : T extends string ? string : string[] | string {
        if (isString(input)) {
            return input[0].toUpperCase() + input.slice(1); // Ok
        } else {
            return input[0].toUpperCase() + input.slice(1); // Bad
            ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'string[]'.
        }
    }
    
    // >> TODO: test non-tail recursive conditionals
    
    function voidRet<T extends { a: string } | undefined>(x: T): T extends {} ? void : T extends undefined ? number : void | number {
        if (x) {
            return; // Ok
        }
        return 1; // Ok
    }