//// [tests/cases/compiler/noUnusedLocals_writeOnlyProperty_dynamicNames.ts] ////

=== noUnusedLocals_writeOnlyProperty_dynamicNames.ts ===
const x = Symbol("x");
>x : unique symbol
>  : ^^^^^^^^^^^^^
>Symbol("x") : unique symbol
>            : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>"x" : string
>    : ^^^^^^

const y = Symbol("y");
>y : unique symbol
>  : ^^^^^^^^^^^^^
>Symbol("y") : unique symbol
>            : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>"y" : string
>    : ^^^^^^

class C {
>C : C
>  : ^

    private [x]: number;
>[x] : number
>    : ^^^^^^
>x : unique symbol
>  : ^^^^^^^^^^^^^

    private [y]: number;
>[y] : number
>    : ^^^^^^
>y : unique symbol
>  : ^^^^^^^^^^^^^

    m() {
>m : () => void
>  : ^^^^^^^^^^

        this[x] = 0; // write-only
>this[x] = 0 : number
>            : ^^^^^^
>this[x] : number
>        : ^^^^^^
>this : this
>     : ^^^^
>x : unique symbol
>  : ^^^^^^^^^^^^^
>0 : number
>  : ^^^^^^

        this[y];
>this[y] : number
>        : ^^^^^^
>this : this
>     : ^^^^
>y : unique symbol
>  : ^^^^^^^^^^^^^
    }
}

