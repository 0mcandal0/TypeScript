//// [tests/cases/compiler/classPropertyErrorOnNameOnly.ts] ////

=== classPropertyErrorOnNameOnly.ts ===
type Values = 1 | 2 | 3 | 4 | 5 | 6
>Values : Values
>       : ^^^^^^

type FuncType = (arg: Values) => string
>FuncType : FuncType
>         : ^^^^^^^^
>arg : Values
>    : ^^^^^^

// turn on strictNullChecks
class Example {
>Example : Example
>        : ^^^^^^^

  insideClass: FuncType = function(val) { // error span goes from here
>insideClass : FuncType
>            : ^^^^^^^^
>function(val) { // error span goes from here    switch (val) {      case 1:        return "1";      case 2:        return "2";      case 3:        return "3"      case 4:        return "4"      case 5:        return "5"      // forgot case 6    }  } : (val: Values) => string | undefined
>                                                                                                                                                                                                                                                          : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>val : Values
>    : ^^^^^^

    switch (val) {
>val : Values
>    : ^^^^^^

      case 1:
>1 : 1
>  : ^

        return "1";
>"1" : string
>    : ^^^^^^

      case 2:
>2 : 2
>  : ^

        return "2";
>"2" : string
>    : ^^^^^^

      case 3:
>3 : 3
>  : ^

        return "3"
>"3" : string
>    : ^^^^^^

      case 4:
>4 : 4
>  : ^

        return "4"
>"4" : string
>    : ^^^^^^

      case 5:
>5 : 5
>  : ^

        return "5"
>"5" : string
>    : ^^^^^^

      // forgot case 6
    }
  } // all the way to here
}

const outsideClass: FuncType = function(val) { // compare to errors only on this line in this case 
>outsideClass : FuncType
>             : ^^^^^^^^
>function(val) { // compare to errors only on this line in this case     switch (val) {      case 1:        return "1";      case 2:        return "2";      case 3:        return "3"      case 4:        return "4"      case 5:        return "5"      // forgot case 6    }} : (val: Values) => string | undefined
>                                                                                                                                                                                                                                                                                : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>val : Values
>    : ^^^^^^

    switch (val) {
>val : Values
>    : ^^^^^^

      case 1:
>1 : 1
>  : ^

        return "1";
>"1" : string
>    : ^^^^^^

      case 2:
>2 : 2
>  : ^

        return "2";
>"2" : string
>    : ^^^^^^

      case 3:
>3 : 3
>  : ^

        return "3"
>"3" : string
>    : ^^^^^^

      case 4:
>4 : 4
>  : ^

        return "4"
>"4" : string
>    : ^^^^^^

      case 5:
>5 : 5
>  : ^

        return "5"
>"5" : string
>    : ^^^^^^

      // forgot case 6
    }
}
